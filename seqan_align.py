from __future__ import print_function
from __future__ import division
from ctypes import *
import os


def main():
    script_path = os.path.dirname(os.path.realpath(__file__))
    c_lib_path = os.path.join(script_path, 'seqan_align.so')
    c_lib = CDLL(c_lib_path)
    c_lib.semiGlobalAlign.argtypes = [c_char_p, c_char_p, c_int, c_int]
    c_lib.semiGlobalAlign.restype = c_void_p
    c_lib.free_c_string.argtypes = [c_void_p]
    c_lib.free_c_string.restype = None

    read_S1_103_691 = 'CAACTACCCAACTAAAAGAGCCACACAGTGAGGAGCGTACACTCACTCATCCGGGCATCTTCCGCAGAACACCACCACTAGTTACAAAACAACAACTAGAAAGAGTTTCCCTTACAGGAGATGCATTGCGAAGTATCATTCCGTTTTCCAGCCAATTAGGACTATACGCGCTGCCAAATCAAGTTCTAATCCGGAATTATGGGGAGTTTGCGCCAGGGGGGGGAATCCCCAAACTACCCTATACAAGGTCCCCCGGGGCAACGTAGTCACCACCCAACTCCTAAAAACGAGGTGAACGACGGGCCTAGTCTGCGGGGTCTACCAGGATACCAAAACGCTAGTCCCCTTCATGTGTGATTCTGCCCGAGGGCGTTCGATAACAACCTCGACGCAAAAACCAAGCTGACCAACGGAAGCCCTCTGTGGTATTCCTATCGGGTAAGGACCCACGGTTTTTCACGCGTAATGGAAGGATCTGGAGTCCCCTCTTGCTGTCCAATACCCGCACATTACGATTTGGGCAGTGCCAAAGCACGGTATGAAAGCACAAAGCCTGACAAGTATAACTTACACGCGCCATTACTAGGTTGGACAGAGTTATACCTACTTTTTTGCCCCACCCCGTGTCTCGCAATGCGGGAACGGCATACAAAGTAGTTCAGTGATGGTCACGAAGGGGGGTTTGATGCCTAACTTTCGCGAGTCCTTGGTTAATGACGAAGACTTTTTGCATAGGACAAAACTAAATTGGGAGTTGGTCCGCCCAAAATAATACGGTCTCGCGTTAATGACCTTTCAGACTCGGGGAGCCCTTGTTATTTTCGTCAGCGAAATTTAGTTAGTCCGCGTGTTACGCGGAGAAAATCTAGGCCCAAGGAAAGGCTGTTGAGCGTGATTATCGTTAATGCGTTAGTTCACGTGCGCGGGGACACTACCGGGTAAACACATGTGATTTTAACAGCTTGCTTTGTGGACGGCAAATCGTGTGGGCTGTCCGGAACCCTTGCACGTAAAAGGTATGCCAGACAGTACAAAGTCATTGGACGGCACGTCACTATCGAAGTCCGACCGCTGGTAAGCACGATTCAAAGGTAACATCTCGGCCGACTACTACTTATACGAGCTCATTAGACGATTAACCTGAGGCGAGAGTCACCTTTGGGCAGGATAGGTGTCGTCTTAGTCGCTTTTCAGGCGGAAAATGTCCGGGGAAAATTATGAAGACCTTCTTGCTCTCGATGAGTACGCACCGTAGGCACGCAGGGACATTAGTAGTCCGAGCCCGCAAACCTCATTCCCCAATGGTTTCTGTAGGGCGGTCATGGACGCCTTTGATTCAATCCCACGGGACCTGCTGCTTCCTAGTTACGTGGGGGCTTATGATCTTGAGGATTGTGCTGCTCCTTCTTATCAAGGGGTTCACAGCCTACTCCACAATAGATATTTCAATGTTCCCACCGGCAGCCGACCTTGGTCCATATCCACTCACGATTCTGGTATTTGAAGACCACAAGAGCGATATTTGTCGGGACTACAAATCGACGACGGGATATCCCGGAACCGCGATTAGTTAAGGAATGACGTACGGCTGCTCTGGATTTCCCCGTTGGAATAGATCGAGACTTAAGTTTCCGGAGGCCTTGTTAAAACAGAGGTTTATAGTGTTCGTGCCCGGGGTTATCCACCCCGTTATTGACGGCCGGGTTCAACAGTAAATACCCGCGTGTCGGGTTTGGACTTGTTAGGGCAACTTACGTGCGTGTGATGTACGGCGTTACAGACGCGTTAAAGGCCCGCTAAGGATTCCACTGGGACACCCGGGCTTTACCTCTACGTGGCGCGGGCGCGTAACTTAACGAACGCTTACGGAATCATAATAAGCCCGACATCAATGCAGCGCCCCGCAGTGATGCAGCCGTACTACTGACGCCAAAAAACAGGTAGGATGTTCAACACCCATTGACCGAGACAACAGATTTTAATGTAGTCAGCTCCTGCTTAGGTGATAGGGGGAACAATTGCTTTACTTCGTATTTTCGGCCCTGTCTCTATACGGTAGGGGTCAGGATATGTGTACTGAATTATCTTTTAAAGTCAGGATGGCGATACGGGGAATGTCGATGCATTAGAGGACTCTGTTCCCATCAGCGGGGATTTGTGAAGAGTTTCGGCGGGTGAGCTACCCATTCCGCAAGGGTGCCCCGGCTTCTCCGAACCTAAATTATAAACCATAATTGTCCTTTCAGCCCTTTACCCGGCATTTAGAGGGCTCTGATGCCGGGAGTATAAATCACCACGGTATTTATGCAAACCTTGTTAAAAGACAATGAATTATGTTATGTAAAGCCCCATCCCGCAAGTTTTCTGGCTCAAAAGTCAATATGAAAGGAGCACTTGACCGGCTCCACTTTAACCCCAAAACCAGCGCTGGGTTTATGAGAGCTATTCGGTTTCACACGCAACGGACCCAAGAAGGTAGGCACAAGCTACCCCTGCTTATTTACATCCCACTTGATGTACAGATCCTACACTCAGTAATCGCCATGTATGGCCACTTACCGTAAGGCGCGATGCATCTCCCCAGTCTAGTAAGAGTCACCATCCAACAATCTTGCTCACCCGCGGAAGGACCTTGTCAGCATTTCACGACGTATCGGATGAGGAACTAACCTGAATGATCCGGTTTCCTGGAGTTGTAGGGATTCCCAAATGTGCAAAGTTGTCGACAGAGCTAAGGCCGTCTGACCTTATCTTTAACGTCACGGTCTAAGGCCAGAGTATCCCCATGAAATCCTCTGGGTATAGCCAGTTTCTAGGACAGGAATTTCGAATTGATTGAATGGTGCACCGTTGCCAGAACGAAGCAGCCGCGGTGATGCAGGCCCAACGAAGAGCCGAGATCTGTGTCCCCAAGATCAATGAGTTAAGAGATGAACTTGTAGAATACTTAGAGGGGATATTCGCGACCTCTTTTAGAGTTTATACAGGGCTTTGCCTTCTTTGGACGTCCCTCTGTGGTGGCGGATGACCGATTCCCAAATTGGTGGAAAGTACCCTGTTTGTCACATTGGCGCTCATCCCCTCGAGAAGGTAACCGAATAGTTATAGTTTCGCCCATATCTTGTATTGGGTACCGCTTAGTGGTAGTCGGATTACACGGGATTGATAACCGTGGTTAATGCAGGCAGCGTCTTCGGGTGTTTACTTGTTTCGAGGCCGGGTGATGACCCATAGTGCGGCCAGTTGTGCGGGGTGCCCATTAACACATGTAACAACAAATCATATGTATTCATTTTTATCTACGACGGAACCGACGCCCTGCTCACCGCCTTTGGTGGCGTGCTTGGGCAATGATGCGCGGCCGGGT'
    node_2 = 'TCCGCGTAAATGACCTTTAAGACGCGGACCCTGTTATTCGTCAGCGAAATTTACTTAGTCCTGTTAAACGCGGAGAAATCTTAGGCCAAGGAAAGCTGTTGAGCAGTGATTTCGTTATGCGTTAGTTCACGGCGCGGGACCTACGGTGAAAACACATTATTTAACAGTTGCTTTTGTGGACGAGCAAAATCGGTTGGGGCTGTCCGAACCCTTGCACGTAAAAAGGGTTCCAGACAGTACCAAAGTCAATTGGACGCGGACTATCGAAGTCGACCGCTGGTAAGCACGATCAAAGGTAAATCCTCGGCCGACTACTACTATACAGCTCATTAGACGGTTAACCTGGGGCGAGAGTTCCTTTGGCAGGATAGGTTCGTCTAGTCCTTTTCGAGGCGGAAATGTCCGAGAATTCTGAGTACTCTGCTCTCGTATGAGTACGCACCGTAGGACGCAGGGGACATTAGTAGTCCGAGCCCGCAAACCTTCATTCGCACATCGTTCTGTTAGGGCGGTCATGTGGACCCTTGATTCCAATCCACGACCTGCTGCCTTTCCGTAGTTACGACGTGGGCTTATCGTCTGAAGGGTGCTAGCTGCCTCTTATCTAGGTTCACAGCCTACTCACCATTAGATTCAATGTTCCCACGCGACGACTTGGTCATATCGACTCACGATTCATGGTATGAAAACACAAATGCGCATATTTTATCGACTAAAATTGACGACGGGGATTGCCCGAACCCATTGGGTAAGAGTACGTACGGATCTCCGGATATTCCCCGTGGAATAGATCGAGACTAGTTCCGAGGCTTGTTAAACAGAGGTTTATGAGTGTCGTGCCGTTATCCACCCGTTATTGTACGGCGTTACAACAGTAATACCCCGTGCTCGGGTTTGACTGTTAGGCAACTACGTGCCCTGTGATGAATGGGGCGTTACAGCCCGCGTGTTAGCCGCTAAAGAGTCTCTCTGAGACACCCGGCTTTACCCTACGTGCGGGCGCGCTAAATACGACGTCGATATCATAATAAGCCGACAACAATGTAGCGCCGCGCAGTGAGGCGACAGTACTACTGACGCCAAAAACAGGTAGGATGTTCACACCGCATTACCGAACAAGAGATTAAGGTAAGTACAGCTTCTGCTTAGGTGATAGGGTAAATCAATTGCTTTACTTCGTATTTCGGCTGGTCTCTCATACGGTAGGGTCAGGATATTGTACTGAATTAACGTTTAAGTCAGGCATGCGATACGGGAATGTCCGATAGCATCTAGAGGACTCTGCTTCATCACGGGATTTGGAAGAGTTTCGGGGTTAGCTAACCAATTCTCGCAAAAGGTGCCCGCTGTTCCGACCTTAGAATATAACATAATTGTCTCAGCCATAATCCGTCATTAGAGGCTCTGATGCCCGGGTAATAAATCGACCACGGTATTATGGAAACTGTTAAAGACAATGAATGTTATGCTAAAAGCCCCATCCGCAGTTTTCTGGCTCAATACTCAATAGGAAAGAAGGCACTTTGAACGGCTCCCACTTTAACCAAACCGATGCTGGTTATGAGAGCTCTTCGTTTCACACGCAACGGACCAGAGAAGTTGGCATCAGCTACCCCTGTTATTTATATCCCAACTGTATGTAGCAGATCCGACCTCAGTAATCGCCAATGTATGGCCACTACGTAAGCGCGATGCAATCTCCCCACTCTAGTAAGAGTCACCATCAACAATTCTTCTCTACCCGCGGAGGACCTTGTCAGCATTCCGTCGTATCGCGTGAGGAACAACTGAATGATCACGGTTCTGGGTTGTCGGGATTCCAAATGGCAAGTTGTGCAGAGCTAAGGCCGTCTGACACTTATTTTAACGTCACGTCTAAGTGCAGAGTATCCATGAAATCGCTCTAGGTATAGCCCAGTTCAGC'

    print('before call')
    ptr = c_lib.semiGlobalAlign(read_S1_103_691, node_2,
                                len(read_S1_103_691), len(node_2),
                                8, 20)
    alignment_result = cast(ptr, c_char_p).value
    c_lib.free_c_string(ptr)
    print('alignment_result:', alignment_result)


def get_all_kmers(seq, k):
    kmers = {}
    for i in range(len(seq) - k):
        kmers[seq[i:i+k]] = (i, i+k)
    return kmers


if __name__ == '__main__':
    main()
