from __future__ import print_function
from __future__ import division
import ctypes
import os


def main():
    script_path = os.path.dirname(os.path.realpath(__file__))
    c_lib_path = os.path.join(script_path, 'seqan_align.so')
    c_lib = ctypes.CDLL(c_lib_path)

    # seq_1 = ctypes.c_char_p('AACATGGCTAAATTTCATGCCAGAATCAGTC')
    # seq_2 = ctypes.c_char_p('GCGCTGAACATGGCTACATTCATCCAGAA')
    # c_lib.semiGlobalAlign(seq_1, seq_2)

    read_S1_103_691 = 'CAACTACCCAACTAAAAGAGCCACACAGTGAGGAGCGTACACTCACTCATCCGGGCATCTTCCGCAGAACACCACCACTAGTTACAAAACAACAACTAGAAAGAGTTTCCCTTACAGGAGATGCATTGCGAAGTATCATTCCGTTTTCCAGCCAATTAGGACTATACGCGCTGCCAAATCAAGTTCTAATCCGGAATTATGGGGAGTTTGCGCCAGGGGGGGGAATCCCCAAACTACCCTATACAAGGTCCCCCGGGGCAACGTAGTCACCACCCAACTCCTAAAAACGAGGTGAACGACGGGCCTAGTCTGCGGGGTCTACCAGGATACCAAAACGCTAGTCCCCTTCATGTGTGATTCTGCCCGAGGGCGTTCGATAACAACCTCGACGCAAAAACCAAGCTGACCAACGGAAGCCCTCTGTGGTATTCCTATCGGGTAAGGACCCACGGTTTTTCACGCGTAATGGAAGGATCTGGAGTCCCCTCTTGCTGTCCAATACCCGCACATTACGATTTGGGCAGTGCCAAAGCACGGTATGAAAGCACAAAGCCTGACAAGTATAACTTACACGCGCCATTACTAGGTTGGACAGAGTTATACCTACTTTTTTGCCCCACCCCGTGTCTCGCAATGCGGGAACGGCATACAAAGTAGTTCAGTGATGGTCACGAAGGGGGGTTTGATGCCTAACTTTCGCGAGTCCTTGGTTAATGACGAAGACTTTTTGCATAGGACAAAACTAAATTGGGAGTTGGTCCGCCCAAAATAATACGGTCTCGCGTTAATGACCTTTCAGACTCGGGGAGCCCTTGTTATTTTCGTCAGCGAAATTTAGTTAGTCCGCGTGTTACGCGGAGAAAATCTAGGCCCAAGGAAAGGCTGTTGAGCGTGATTATCGTTAATGCGTTAGTTCACGTGCGCGGGGACACTACCGGGTAAACACATGTGATTTTAACAGCTTGCTTTGTGGACGGCAAATCGTGTGGGCTGTCCGGAACCCTTGCACGTAAAAGGTATGCCAGACAGTACAAAGTCATTGGACGGCACGTCACTATCGAAGTCCGACCGCTGGTAAGCACGATTCAAAGGTAACATCTCGGCCGACTACTACTTATACGAGCTCATTAGACGATTAACCTGAGGCGAGAGTCACCTTTGGGCAGGATAGGTGTCGTCTTAGTCGCTTTTCAGGCGGAAAATGTCCGGGGAAAATTATGAAGACCTTCTTGCTCTCGATGAGTACGCACCGTAGGCACGCAGGGACATTAGTAGTCCGAGCCCGCAAACCTCATTCCCCAATGGTTTCTGTAGGGCGGTCATGGACGCCTTTGATTCAATCCCACGGGACCTGCTGCTTCCTAGTTACGTGGGGGCTTATGATCTTGAGGATTGTGCTGCTCCTTCTTATCAAGGGGTTCACAGCCTACTCCACAATAGATATTTCAATGTTCCCACCGGCAGCCGACCTTGGTCCATATCCACTCACGATTCTGGTATTTGAAGACCACAAGAGCGATATTTGTCGGGACTACAAATCGACGACGGGATATCCCGGAACCGCGATTAGTTAAGGAATGACGTACGGCTGCTCTGGATTTCCCCGTTGGAATAGATCGAGACTTAAGTTTCCGGAGGCCTTGTTAAAACAGAGGTTTATAGTGTTCGTGCCCGGGGTTATCCACCCCGTTATTGACGGCCGGGTTCAACAGTAAATACCCGCGTGTCGGGTTTGGACTTGTTAGGGCAACTTACGTGCGTGTGATGTACGGCGTTACAGACGCGTTAAAGGCCCGCTAAGGATTCCACTGGGACACCCGGGCTTTACCTCTACGTGGCGCGGGCGCGTAACTTAACGAACGCTTACGGAATCATAATAAGCCCGACATCAATGCAGCGCCCCGCAGTGATGCAGCCGTACTACTGACGCCAAAAAACAGGTAGGATGTTCAACACCCATTGACCGAGACAACAGATTTTAATGTAGTCAGCTCCTGCTTAGGTGATAGGGGGAACAATTGCTTTACTTCGTATTTTCGGCCCTGTCTCTATACGGTAGGGGTCAGGATATGTGTACTGAATTATCTTTTAAAGTCAGGATGGCGATACGGGGAATGTCGATGCATTAGAGGACTCTGTTCCCATCAGCGGGGATTTGTGAAGAGTTTCGGCGGGTGAGCTACCCATTCCGCAAGGGTGCCCCGGCTTCTCCGAACCTAAATTATAAACCATAATTGTCCTTTCAGCCCTTTACCCGGCATTTAGAGGGCTCTGATGCCGGGAGTATAAATCACCACGGTATTTATGCAAACCTTGTTAAAAGACAATGAATTATGTTATGTAAAGCCCCATCCCGCAAGTTTTCTGGCTCAAAAGTCAATATGAAAGGAGCACTTGACCGGCTCCACTTTAACCCCAAAACCAGCGCTGGGTTTATGAGAGCTATTCGGTTTCACACGCAACGGACCCAAGAAGGTAGGCACAAGCTACCCCTGCTTATTTACATCCCACTTGATGTACAGATCCTACACTCAGTAATCGCCATGTATGGCCACTTACCGTAAGGCGCGATGCATCTCCCCAGTCTAGTAAGAGTCACCATCCAACAATCTTGCTCACCCGCGGAAGGACCTTGTCAGCATTTCACGACGTATCGGATGAGGAACTAACCTGAATGATCCGGTTTCCTGGAGTTGTAGGGATTCCCAAATGTGCAAAGTTGTCGACAGAGCTAAGGCCGTCTGACCTTATCTTTAACGTCACGGTCTAAGGCCAGAGTATCCCCATGAAATCCTCTGGGTATAGCCAGTTTCTAGGACAGGAATTTCGAATTGATTGAATGGTGCACCGTTGCCAGAACGAAGCAGCCGCGGTGATGCAGGCCCAACGAAGAGCCGAGATCTGTGTCCCCAAGATCAATGAGTTAAGAGATGAACTTGTAGAATACTTAGAGGGGATATTCGCGACCTCTTTTAGAGTTTATACAGGGCTTTGCCTTCTTTGGACGTCCCTCTGTGGTGGCGGATGACCGATTCCCAAATTGGTGGAAAGTACCCTGTTTGTCACATTGGCGCTCATCCCCTCGAGAAGGTAACCGAATAGTTATAGTTTCGCCCATATCTTGTATTGGGTACCGCTTAGTGGTAGTCGGATTACACGGGATTGATAACCGTGGTTAATGCAGGCAGCGTCTTCGGGTGTTTACTTGTTTCGAGGCCGGGTGATGACCCATAGTGCGGCCAGTTGTGCGGGGTGCCCATTAACACATGTAACAACAAATCATATGTATTCATTTTTATCTACGACGGAACCGACGCCCTGCTCACCGCCTTTGGTGGCGTGCTTGGGCAATGATGCGCGGCCGGGT'
    node_2 = 'TCCGCGTAAATGACCTTTAAGACGCGGACCCTGTTATTCGTCAGCGAAATTTACTTAGTCCTGTTAAACGCGGAGAAATCTTAGGCCAAGGAAAGCTGTTGAGCAGTGATTTCGTTATGCGTTAGTTCACGGCGCGGGACCTACGGTGAAAACACATTATTTAACAGTTGCTTTTGTGGACGAGCAAAATCGGTTGGGGCTGTCCGAACCCTTGCACGTAAAAAGGGTTCCAGACAGTACCAAAGTCAATTGGACGCGGACTATCGAAGTCGACCGCTGGTAAGCACGATCAAAGGTAAATCCTCGGCCGACTACTACTATACAGCTCATTAGACGGTTAACCTGGGGCGAGAGTTCCTTTGGCAGGATAGGTTCGTCTAGTCCTTTTCGAGGCGGAAATGTCCGAGAATTCTGAGTACTCTGCTCTCGTATGAGTACGCACCGTAGGACGCAGGGGACATTAGTAGTCCGAGCCCGCAAACCTTCATTCGCACATCGTTCTGTTAGGGCGGTCATGTGGACCCTTGATTCCAATCCACGACCTGCTGCCTTTCCGTAGTTACGACGTGGGCTTATCGTCTGAAGGGTGCTAGCTGCCTCTTATCTAGGTTCACAGCCTACTCACCATTAGATTCAATGTTCCCACGCGACGACTTGGTCATATCGACTCACGATTCATGGTATGAAAACACAAATGCGCATATTTTATCGACTAAAATTGACGACGGGGATTGCCCGAACCCATTGGGTAAGAGTACGTACGGATCTCCGGATATTCCCCGTGGAATAGATCGAGACTAGTTCCGAGGCTTGTTAAACAGAGGTTTATGAGTGTCGTGCCGTTATCCACCCGTTATTGTACGGCGTTACAACAGTAATACCCCGTGCTCGGGTTTGACTGTTAGGCAACTACGTGCCCTGTGATGAATGGGGCGTTACAGCCCGCGTGTTAGCCGCTAAAGAGTCTCTCTGAGACACCCGGCTTTACCCTACGTGCGGGCGCGCTAAATACGACGTCGATATCATAATAAGCCGACAACAATGTAGCGCCGCGCAGTGAGGCGACAGTACTACTGACGCCAAAAACAGGTAGGATGTTCACACCGCATTACCGAACAAGAGATTAAGGTAAGTACAGCTTCTGCTTAGGTGATAGGGTAAATCAATTGCTTTACTTCGTATTTCGGCTGGTCTCTCATACGGTAGGGTCAGGATATTGTACTGAATTAACGTTTAAGTCAGGCATGCGATACGGGAATGTCCGATAGCATCTAGAGGACTCTGCTTCATCACGGGATTTGGAAGAGTTTCGGGGTTAGCTAACCAATTCTCGCAAAAGGTGCCCGCTGTTCCGACCTTAGAATATAACATAATTGTCTCAGCCATAATCCGTCATTAGAGGCTCTGATGCCCGGGTAATAAATCGACCACGGTATTATGGAAACTGTTAAAGACAATGAATGTTATGCTAAAAGCCCCATCCGCAGTTTTCTGGCTCAATACTCAATAGGAAAGAAGGCACTTTGAACGGCTCCCACTTTAACCAAACCGATGCTGGTTATGAGAGCTCTTCGTTTCACACGCAACGGACCAGAGAAGTTGGCATCAGCTACCCCTGTTATTTATATCCCAACTGTATGTAGCAGATCCGACCTCAGTAATCGCCAATGTATGGCCACTACGTAAGCGCGATGCAATCTCCCCACTCTAGTAAGAGTCACCATCAACAATTCTTCTCTACCCGCGGAGGACCTTGTCAGCATTCCGTCGTATCGCGTGAGGAACAACTGAATGATCACGGTTCTGGGTTGTCGGGATTCCAAATGGCAAGTTGTGCAGAGCTAAGGCCGTCTGACACTTATTTTAACGTCACGTCTAAGTGCAGAGTATCCATGAAATCGCTCTAGGTATAGCCCAGTTCAGC'

    # k_size = 8
    # k_1 = get_all_kmers(read_S1_103_691, k_size)
    # k_2 = get_all_kmers(node_2_minus, k_size)
    # common_kmers = set(k_1.keys()).intersection(k_2.keys())
    # exact_match_locations = []
    # for common_kmer in common_kmers:
    #     exact_match_locations.append([k_1[common_kmer][0], k_1[common_kmer][1],
    #                                   k_2[common_kmer][0], k_2[common_kmer][1]])
    # exact_match_locations = sorted(exact_match_locations)

    # merged_match_locations = []
    # current_location = exact_match_locations[0]
    # current_s1_start = current_location[0]
    # for location in exact_match_locations[1:]:
    #     if location[0] == current_s1_start + 1:
    #         current_location[1] += 1
    #         current_location[3] += 1
    #     else:
    #         merged_match_locations.append(current_location)
    #         current_location = location
    #         current_s1_start = location[0]
    # merged_match_locations.append(current_location)
    
    # print(merged_match_locations)



    seq_1 = ctypes.c_char_p(read_S1_103_691)
    seq_2 = ctypes.c_char_p(node_2)

    seq_1_len = ctypes.c_int(len(read_S1_103_691))
    seq_2_len = ctypes.c_int(len(node_2))


    c_lib.semiGlobalAlign(seq_1, seq_2, seq_1_len, seq_2_len, 8, 20)



def get_all_kmers(seq, k):
    kmers = {}
    for i in range(len(seq) - k):
        kmers[seq[i:i+k]] = (i, i+k)
    return kmers


if __name__ == '__main__':
    main()
